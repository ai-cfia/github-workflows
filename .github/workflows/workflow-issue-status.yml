name: Workflow issue status
on:
  workflow_call:

jobs:
  handle_issue_events:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Generate token from Github application (GH app for workflows)
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.GH_WORKFLOW_APP_ID }}
          private-key: ${{ secrets.GH_WORKFLOW_APP_PEM }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Extract issue number
        run: |
          ISSUE_NUMBER=""
          if [ "${{ github.event_name }}" = "issues" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            ISSUE_NUMBER=$(echo "${{ github.event.pull_request.body }}" | grep -oE '#[0-9]+' | tr -d '#')
          fi
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      # Use cases:
      # - "issues:opened": Set status to "Todo"
      # - "issues:deleted" || "pull_request:closed" (when not merged): Set status to "Won't do"
      # - "pull_request:opened" || "pull_request:converted_to_draft": Set status to "In Progress"
      # - "pull_request:ready_for_review" || "pull_request:opened": Set status to "In Review"
      # - "pull_request:merged": Set status to "Done"
      - name: Fetch project data and update status
        run: |
          function update_status() {
            local ITEM_ID=$1
            local PROJECT_ID=$2

            local TARGET_STATUS_NAME=$3
            local STATUS_FIELD_ENTRY=$(gh api graphql -f query='
              query {
                node(id: "'"$PROJECT_ID"'") {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            ' | jq '.data.node.fields.nodes[] | select(.name=="Status")')

            local STATUS_FIELD_ID=$(echo "$STATUS_FIELD_ENTRY" | jq -r '.id')
            local OPTIONS_JSON=$(echo "$STATUS_FIELD_ENTRY" | jq -c '.options')
            local TARGET_STATUS_NAME_LOWER=$(echo "$TARGET_STATUS_NAME" | tr '[:upper:]' '[:lower:]')
            local NEW_OPTION_ID=$(echo "$OPTIONS_JSON" | jq -r --arg name "$TARGET_STATUS_NAME_LOWER" '.[] | select(.name | ascii_downcase == $name) | .id')

            gh project item-edit --id "$ITEM_ID" --project-id "$PROJECT_ID" --field-id "$STATUS_FIELD_ID" --single-select-option-id "${NEW_OPTION_ID}"
          }

          # Process each project where ISSUE_NUMBER is present
          ISSUE_PROJECTS_JSON=$(gh issue view ${{ env.ISSUE_NUMBER }} --json projectItems)

          for item in $(echo "${ISSUE_PROJECTS_JSON}" | jq -r '.projectItems[] | @base64'); do
            _jq() {
             echo ${item} | base64 --decode | jq -r ${1}
            }

            PROJECT_ID=$(_jq '.id')
            ITEM_ID=$(gh project item-list --project-id "$PROJECT_ID" --json items | jq -r '.items[] | select(.content.number==$ISSUE_NUMBER) | .id')

            if [ -z "$ITEM_ID" ]; then
              echo "Item not found for project $PROJECT_ID"
              continue
            fi

            case "${GITHUB_EVENT_NAME}:${GITHUB_EVENT_ACTION}" in
              "issues:opened") TARGET_STATUS_NAME="Todo" ;;
              "issues:deleted") TARGET_STATUS_NAME="Won't do" ;;
              "pull_request:opened_|_converted_to_draft") TARGET_STATUS_NAME="In Progress" ;;
              "pull_request:ready_for_review_|_opened") TARGET_STATUS_NAME="In Review" ;;
              "pull_request:merged") TARGET_STATUS_NAME="Done" ;;
              "pull_request:closed") TARGET_STATUS_NAME="Won't do" ;;
              # Add cases as needed
              *)
                echo "No status change action for this event"
                continue
                ;;
            esac

            update_status "$ITEM_ID" "$PROJECT_ID" "$TARGET_STATUS_NAME"
          done
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          ISSUE_NUMBER: ${{ env.ISSUE_NUMBER }}
