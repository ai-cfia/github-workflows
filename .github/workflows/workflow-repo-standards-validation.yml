name: Reusable workflow to validate organization standards

on:
  workflow_call:

jobs:
  validate-name:
    runs-on: ubuntu-latest
    steps:
    - name: Check repository name
      uses: actions/github-script@v5
      with:
        script: |
          const { repo } = context.repo;

          if (repo.includes('_')) {
            core.setFailed("Repository name contains underscores (_). Please remove them and use dashes (-) instead.");
          }

    - name: Check repository visibility
      uses: actions/github-script@v5
      with:
        script: |
          const { owner,repo } = context.repo;
          const repoDetails = await github.rest.repos.get({ owner,repo })

          if (repoDetails.data.private){
            core.setFailed("Repository is private, please make it public");
          }
      if: always() # Run step even if previous steps fail.

    - name: Check repository description
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo;
          const repoDetails = await github.rest.repos.get({ owner, repo });

          if (!repoDetails.data.description) {
            core.setFailed("The repository does not have a description, please add one.");
          }
      if: always()

    - name: Check branch protection
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.AILAB_OCTOKIT_ACCESS_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          try {
            const protection = await github.rest.repos.getBranchProtection({
              owner,
              repo,
              branch: 'main'
            });
          } catch (error) {
            if (error.message.includes("Branch not protected")) {
              core.setFailed("The main branch is not protected, please protect it.");
            } else {
              core.setFailed(`An error occurred: ${error.message}`);
            }
            return;
          }
      if: always() # Run step even if previous steps fail.

    - name: Check repository license
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo;
          const repoDetails = await github.rest.repos.get({ owner, repo });

          if (!repoDetails.data.license) {
            core.setFailed("The repository does not have a license, please add one.");
          }
      if: always() # Run step even if previous steps fail.

    - name: Check presence of README
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo;
          try {
            await github.rest.repos.getContent({
              owner,
              repo,
              path: 'README.md'
            });
          } catch (error) {
            if (error.status === 404) {
              core.setFailed("The repository does not have a README.md file, please add one.");
            } else {
              core.setFailed(`An error occurred while checking for README: ${error.message}`);
            }
          }
      if: always() # Run step even if previous steps fail.

    - name: Check presence of TESTING.md
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo;
          try {
            await github.rest.repos.getContent({
              owner,
              repo,
              path: 'TESTING.md'
            });
          } catch (error) {
            if (error.status === 404) {
              core.setFailed("The repository does not have a TESTING.md file, please add one.");
            } else {
              core.setFailed(`An error occurred while checking for TESTING.md: ${error.message}`);
            }
          }
      if: always() # Run step even if previous steps fail.

    - name: Checkout code
      uses: actions/checkout@v3

    - name : Edit intake file
      run: |
        if [[ -f "intake.md" ]]; then
          sed -i 's/\* \[ \] \[Configure repository to our own internal standards\]/\* \[x\] \[Configure repository to our own internal standards\]/' intake.md
        else
          echo "intake.md does not exist, this step will be skipped. Refer to rel-dev-doc repo for intake template"
        fi

    - name: Commit and push using Octokit
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.SECRET_PAT }}
        script: |
          const fs = require('fs');
          const { owner, repo } = context.repo;
          const path = "intake.md";
          const message = "automatic update from workflow";

          // Read the modified intake.md content
          const modifiedContent = fs.readFileSync('./intake.md', 'utf-8');
          const base64Content = Buffer.from(modifiedContent).toString('base64');

          // Create the blob for the modified content
          const blob = await github.rest.git.createBlob({
            owner,
            repo,
            content: base64Content,
            encoding: 'base64'
          });

          // Get the SHA for the current branch
          const branch = await github.rest.repos.getBranch({ owner, repo, branch: context.ref.replace('refs/heads/', '') });
          const branchSha = branch.data.commit.sha;

          // Create a new tree
          const tree = await github.rest.git.createTree({
            owner,
            repo,
            base_tree: branchSha,
            tree: [{
              path: path,
              mode: '100644',
              type: 'blob',
              sha: blob.data.sha
            }]
          });

          // Create a new commit
          const commit = await github.rest.git.createCommit({
            owner,
            repo,
            message: message,
            tree: tree.data.sha,
            parents: [branchSha]
          });

          // Update the branch to point to the new commit
          await github.rest.git.updateRef({
            owner,
            repo,
            ref: 'heads/' + context.ref.replace('refs/heads/', ''),
            sha: commit.data.sha
          });
