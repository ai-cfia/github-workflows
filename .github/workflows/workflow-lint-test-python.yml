---
name: Reusable lint and test workflow for Python projects

on:
  workflow_call:
    inputs:
      pyproject-path:
        required: false
        type: string
      package-name:
        required: false
        type: string
      test-path:
        required: false
        type: string

permissions:
  actions: read
  pull-requests: write

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.x'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.1.0
          if [ -f requirements.txt ]; then \
            pip install -r requirements.txt; \
          fi
          pip install pytest pytest-cov # for coverage

      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined
          # names
          ruff --output-format=github --select=E9,F63,F7,F82 \
            --target-version=py311 .
          # default set of ruff rules with GitHub Annotations
          ruff --output-format=github --target-version=py311 .

      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Test with unittest
        run: |
          test_path="${{ inputs.test-path || 'tests' }}"
          python -m unittest discover -s $test_path

      - name: Run tests with coverage (coverage must be at least 80% to pass)
        run: |
          test_path="${{ inputs.test-path || 'tests' }}"
          pytest --cov=. --cov-fail-under=80 $test_path # default value, coverage must be at least 80%

  version-bump-check:
    runs-on: ubuntu-latest
    if: inputs.pyproject-path != ''
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Parse new version from pyproject.toml
        id: parse_new_version
        run: |
          new_version=$(grep -Po '(?<=^version = ")[^"]*' ${{ inputs.pyproject-path }})
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Get latest version
        id: get_latest_version
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))
          latest_version=$(echo $latest_tag | grep -oP '(?<=v)[0-9]+\.[0-9]+\.[0-9]+')
          echo "latest_version=$latest_version" >> $GITHUB_ENV

      - name: Check version bump
        run: |
          if [ "${{ env.new_version }}" == "${{ env.latest_version }}" ]; then
            echo "Version has not been bumped!"
            exit 1
          else
            echo "Version has been bumped."
          fi
